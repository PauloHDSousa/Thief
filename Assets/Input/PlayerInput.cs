//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterController"",
            ""id"": ""46453fb1-ff76-4f80-9be5-24f0c948b96e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a98367d6-cf80-4664-b995-80dc304b3ee1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TransformIntoBox"",
                    ""type"": ""Button"",
                    ""id"": ""bb1e9254-aa20-4a2c-b908-ed02f44e4859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowBehindWalls"",
                    ""type"": ""Button"",
                    ""id"": ""5725896c-a731-42a9-80fb-6380401c03cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Whistle"",
                    ""type"": ""Button"",
                    ""id"": ""cf26f86a-0031-4e4a-ba6d-bd860a9c10a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07a64074-3cfd-4d69-b950-956c6750f84d"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cc41379d-fdbf-4db8-bb8a-e88bf8904af1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""adf5b92c-b786-4cb1-a246-22db568beba9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd28cdd8-2d89-4a5e-a4aa-7ab0f734b3c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""676c5560-7d1c-4904-812f-ea596f5a0d92"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""41db00f4-0184-4012-b9f5-2a1ad5efc05b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2c035c48-bb1a-48fd-97fa-52178aa7eea7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TransformIntoBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0ff062e-68fd-4862-8dcb-2157cd44f47e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowBehindWalls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c7dcbd4-55d4-4f56-b99f-3e26b6eea0cf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Whistle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterController
        m_CharacterController = asset.FindActionMap("CharacterController", throwIfNotFound: true);
        m_CharacterController_Movement = m_CharacterController.FindAction("Movement", throwIfNotFound: true);
        m_CharacterController_TransformIntoBox = m_CharacterController.FindAction("TransformIntoBox", throwIfNotFound: true);
        m_CharacterController_ShowBehindWalls = m_CharacterController.FindAction("ShowBehindWalls", throwIfNotFound: true);
        m_CharacterController_Whistle = m_CharacterController.FindAction("Whistle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterController
    private readonly InputActionMap m_CharacterController;
    private ICharacterControllerActions m_CharacterControllerActionsCallbackInterface;
    private readonly InputAction m_CharacterController_Movement;
    private readonly InputAction m_CharacterController_TransformIntoBox;
    private readonly InputAction m_CharacterController_ShowBehindWalls;
    private readonly InputAction m_CharacterController_Whistle;
    public struct CharacterControllerActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterController_Movement;
        public InputAction @TransformIntoBox => m_Wrapper.m_CharacterController_TransformIntoBox;
        public InputAction @ShowBehindWalls => m_Wrapper.m_CharacterController_ShowBehindWalls;
        public InputAction @Whistle => m_Wrapper.m_CharacterController_Whistle;
        public InputActionMap Get() { return m_Wrapper.m_CharacterController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControllerActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterControllerActions instance)
        {
            if (m_Wrapper.m_CharacterControllerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                @TransformIntoBox.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnTransformIntoBox;
                @TransformIntoBox.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnTransformIntoBox;
                @TransformIntoBox.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnTransformIntoBox;
                @ShowBehindWalls.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnShowBehindWalls;
                @ShowBehindWalls.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnShowBehindWalls;
                @ShowBehindWalls.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnShowBehindWalls;
                @Whistle.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnWhistle;
                @Whistle.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnWhistle;
                @Whistle.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnWhistle;
            }
            m_Wrapper.m_CharacterControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @TransformIntoBox.started += instance.OnTransformIntoBox;
                @TransformIntoBox.performed += instance.OnTransformIntoBox;
                @TransformIntoBox.canceled += instance.OnTransformIntoBox;
                @ShowBehindWalls.started += instance.OnShowBehindWalls;
                @ShowBehindWalls.performed += instance.OnShowBehindWalls;
                @ShowBehindWalls.canceled += instance.OnShowBehindWalls;
                @Whistle.started += instance.OnWhistle;
                @Whistle.performed += instance.OnWhistle;
                @Whistle.canceled += instance.OnWhistle;
            }
        }
    }
    public CharacterControllerActions @CharacterController => new CharacterControllerActions(this);
    public interface ICharacterControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTransformIntoBox(InputAction.CallbackContext context);
        void OnShowBehindWalls(InputAction.CallbackContext context);
        void OnWhistle(InputAction.CallbackContext context);
    }
}
